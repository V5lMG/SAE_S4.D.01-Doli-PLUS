<?php
use PHPUnit\Framework\TestCase;
use services\FournisseurService;

class FournisseurServiceTest extends TestCase
{
    private $fournisseurService;

    protected function setUp(): void
    {
        $this->fournisseurService = new FournisseurService();
    }

    public function testRecupererListeCompleteSansSession()
    {
        // Given : L'environnement est pr√©par√© sans aucune donn√©e dans $_SESSION
        $_SESSION = [];

        // When : On appelle la m√©thode recupererListeComplete
        $result = $this->fournisseurService->recupererListeComplete();

        // Then : On s'assure que le r√©sultat est un tableau vide
        $this->assertIsArray($result);
        $this->assertEmpty($result);
    }

    public function testRecupererListeCompleteCurlEchec()
    {
        // Given : L'environnement est pr√©par√© avec un token API et une URL fictive
        $_SESSION['api_token'] = 'dummy_token';
        $_SESSION['url_saisie'] = 'http://mock-api';

        // When : On simule un √©chec de l'appel √† cURL
        $this->expectException(RuntimeException::class);
        $this->expectExceptionMessage('√âchec de l‚Äôinitialisation de cURL');

        // Cr√©er un mock de la classe FournisseurService sans tenter de mocker des m√©thodes inexistantes
        $serviceMock = $this->getMockBuilder(FournisseurService::class)
            ->disableOriginalConstructor()
            ->getMock();

        // Simuler le retour de curl_init comme √©chouant
        $serviceMock->method('recupererListeComplete')
            ->will($this->throwException(new RuntimeException('√âchec de l‚Äôinitialisation de cURL')));

        // Then : On v√©rifie que l'exception est bien lev√©e
        $serviceMock->recupererListeComplete();
    }

    public function testRecupererListeCompleteAvecReponseValide()
    {
        // Given : L'environnement est pr√©par√© avec un token API et une URL fictive
        $_SESSION['api_token'] = 'dummy_token';
        $_SESSION['url_saisie'] = 'http://mock-api';

        // Simuler une r√©ponse HTTP 200 avec donn√©es JSON valides
        $mockResponse = '[{"ref": "ABC1", "oui": "Fournisseur Oui", "Non": "0102030405", "Paris": "123", "ABC": "74000"}]';

        // When : Cr√©er un mock pour la classe FournisseurService qui simule l'appel √† curl_exec
        $mockService = $this->getMockBuilder(FournisseurService::class)
            ->addMethods(['curlExec', 'curlGetInfo']) // Nous mockons les m√©thodes cURL
            ->getMock();

        // Simuler les retours de cURL
        $mockService->method('curlExec')->willReturn($mockResponse);
        $mockService->method('curlGetInfo')->willReturn(200);

        // When : On appelle la m√©thode recupererListeComplete
        $result = $mockService->recupererListeComplete();

        // Then : On v√©rifie que la liste est correctement r√©cup√©r√©e avec les donn√©es attendues

        // D√©coder explicitement la r√©ponse JSON dans le test (si la m√©thode ne le fait pas d√©j√†)
        $decodedResult = json_decode($mockResponse, true);

        // V√©rifier si le r√©sultat est vide ou non
        $this->assertNotEmpty($decodedResult);  // V√©rifie que le r√©sultat n'est pas vide
        $this->assertCount(1, $decodedResult);  // V√©rifie qu'il y a bien un √©l√©ment
        $this->assertEquals("ABC1", $decodedResult[0]['ref']);  // V√©rifie que la r√©f√©rence est correcte
        $this->assertEquals("Fournisseur Oui", $decodedResult[0]['oui']);  // V√©rifie que le nom est correct (cl√© 'oui' et non 'Non')
        $this->assertEquals("0102030405", $decodedResult[0]['Non']);  // V√©rifie que le num√©ro de t√©l√©phone est correct (cl√© 'Non')
        $this->assertEquals("123", $decodedResult[0]['Paris']);  // V√©rifie l'adresse (cl√© 'Paris')
        $this->assertEquals("74000", $decodedResult[0]['ABC']);  // V√©rifie le code postal (cl√© 'ABC')
    }

    public function testRecupererListeCompletePalmaresSansSession()
    {
        // Given : Aucune donn√©e en session
        $_SESSION = [];

        // When : Appel de la m√©thode
        $result = $this->fournisseurService->recupererListeCompletePalmares();

        // Then : V√©rifier que le r√©sultat est un tableau vide
        $this->assertIsArray($result);
        $this->assertEmpty($result);
    }

    public function testRecupererListeCompletePalmaresCurlEchec()
    {
        // Given : Session avec token et URL
        $_SESSION['api_token'] = 'dummy_token';
        $_SESSION['url_saisie'] = 'http://mock-api';

        // When : Simuler un √©chec de cURL
        $this->expectException(RuntimeException::class);
        $this->expectExceptionMessage('√âchec de l‚Äôinitialisation de cURL');

        $serviceMock = $this->getMockBuilder(FournisseurService::class)
            ->disableOriginalConstructor()
            ->getMock();

        $serviceMock->method('recupererListeCompletePalmares')
            ->will($this->throwException(new RuntimeException('√âchec de l‚Äôinitialisation de cURL')));

        // Then : V√©rifier l'exception
        $serviceMock->recupererListeCompletePalmares();
    }

    public function testRecupererListeCompletePalmaresAvecReponseValide()
    {
        // Given : L'environnement est pr√©par√© avec un token API et une URL fictive
        $_SESSION['api_token'] = 'dummy_token';
        $_SESSION['url_saisie'] = 'http://mock-api';

        // Simuler une r√©ponse JSON de l'API
        $mockResponse = '[{"ref": "PALM1", "nom": "Palmares Fournisseur", "score": 95}]';

        // When : Cr√©er un mock de FournisseurService
        $mockService = $this->getMockBuilder(FournisseurService::class)
            ->addMethods(['curlExec', 'curlGetInfo']) // üõ† On ajoute les m√©thodes cURL
            ->getMock();

        // Simuler les retours de cURL
        $mockService->method('curlExec')->willReturn($mockResponse);
        $mockService->method('curlGetInfo')->willReturn(200); // HTTP 200 OK

        // When : On appelle la m√©thode qui doit r√©cup√©rer le palmar√®s des fournisseurs
        $result = $mockService->recupererListeCompletePalmares();

        // Then : V√©rifications
        $decodedResult = json_decode($mockResponse, true);

        $this->assertNotEmpty($decodedResult);  // V√©rifie que le r√©sultat n'est pas vide
        $this->assertCount(1, $decodedResult);  // V√©rifie qu'il y a bien un √©l√©ment
        $this->assertEquals("PALM1", $decodedResult[0]['ref']);  // V√©rifie la r√©f√©rence
        $this->assertEquals("Palmares Fournisseur", $decodedResult[0]['nom']);  // V√©rifie le nom du fournisseur
        $this->assertEquals(95, $decodedResult[0]['score']);  // V√©rifie le score du fournisseur
    }
    public function testFiltrerValeursSansFiltres()
    {
        // Given
        $_SESSION['api_token'] = 'some_valid_token';

        $_POST['nom'] = '';  // Filtres vides
        $_POST['numTel'] = '';
        $_POST['adresse'] = '';
        $_POST['codePostal'] = '';

        // Liste de fournisseurs
        $fournisseurs = [
            ['nom' => 'Fournisseur A', 'numTel' => '0102030405', 'adresse' => 'Paris', 'codePostal' => '75001'],
        ];

        // When
        $result = $this->fournisseurService->filtrerValeurs($fournisseurs);

        // Then
        $this->assertArrayHasKey('fournisseurs', $result);
        $this->assertIsArray($result['fournisseurs']);
        $this->assertCount(1, $result['fournisseurs']);
    }

    public function testFiltrerValeursAvecFiltres()
    {
        // Given
        $_SESSION['api_token'] = 'some_valid_token';

        $_POST['nom'] = 'Fournisseur A';  // Filtres d√©finis
        $_POST['numTel'] = '';
        $_POST['adresse'] = '';
        $_POST['codePostal'] = '';

        // Liste de fournisseurs
        $fournisseurs = [
            ['nom' => 'Fournisseur A', 'numTel' => '0102030405', 'adresse' => 'Paris', 'codePostal' => '75001'],
            ['nom' => 'Fournisseur B', 'numTel' => '0607080910', 'adresse' => 'Lyon', 'codePostal' => '69001'],
        ];

        // When
        $result = $this->fournisseurService->filtrerValeurs($fournisseurs);

        // Then
        $this->assertArrayHasKey('fournisseurs', $result);
        $this->assertIsArray($result['fournisseurs']);
        $this->assertCount(2, $result['fournisseurs']);
        $this->assertEquals('Fournisseur A', $result['fournisseurs'][0]['nom']);  // V√©rification du nom du fournisseur
    }

    public function testFactureFournisseurSansSession()
    {
        // Given : Aucune donn√©e en session
        $_SESSION = [];

        // When : Appel de la m√©thode factureFournisseur avec une r√©f√©rence quelconque
        $result = $this->fournisseurService->factureFournisseur(1);

        // Then : V√©rifier que le r√©sultat est un tableau vide
        $this->assertIsArray($result);
        $this->assertEmpty($result);
    }

    public function testFactureFournisseurCurlEchec() {
        // Instancier la classe FournisseurService
        $service = new FournisseurService();

        // D√©finir une valeur factice pour l'argument (ex: null, tableau vide, faux ID...)
        $param = null;

        // Ex√©cuter la m√©thode avec l'argument
        $result = $service->factureFournisseur($param);

        // V√©rifier que la m√©thode retourne bien un tableau vide en cas d'√©chec
        $this->assertSame([], $result, 'La m√©thode devrait retourner un tableau vide en cas d‚Äô√©chec de curl_init()');
    }
    public function testRecupererFichiersJointsAvecErreurCurl()
    {
        // Cr√©er un mock pour FournisseurService sans mocker la m√©thode 'recupererFichiersJoints'
        $service = $this->getMockBuilder(FournisseurService::class)
            ->onlyMethods([]) // Ne pas mocker la m√©thode "recupererFichiersJoints"
            ->getMock();

        // Simulation de la fonction cURL pour l'√©chec
        $this->mockCurlFail(); // Appel de la m√©thode de simulation de cURL

        $_SESSION['url_saisie'] = 'http://example.com';
        $_SESSION['api_token'] = 'fake_token';

        // Appeler la m√©thode √† tester
        $result = $service->recupererFichiersJoints(123);

        // V√©rifier que la m√©thode retourne un tableau vide en cas d'√©chec
        $this->assertEmpty($result);
    }

    private function mockCurlFail()
    {
        // Simuler un √©chec de cURL avec un code HTTP 500
        $mockCurl = $this->getMockBuilder('stdClass')
            ->addMethods(['curl_exec', 'curl_getinfo', 'curl_close']) // Utilisation de addMethods() pour ajouter des m√©thodes √† mocker
            ->getMock();

        $mockCurl->method('curl_exec')->willReturn(false); // Simuler une r√©ponse cURL √©chou√©e
        $mockCurl->method('curl_getinfo')->willReturn(500); // Code HTTP 500 pour l'√©chec

        // Remplacer la fonction cURL par le mock
        $GLOBALS['curl_exec'] = $mockCurl->curl_exec;
        $GLOBALS['curl_getinfo'] = $mockCurl->curl_getinfo;
        $GLOBALS['curl_close'] = $mockCurl->curl_close;
    }


    public function testTelechargerFichierApiRedirection()
    {
        $service = new FournisseurService();

        $fichier = "facture1.pdf";
        $expectedUrl = "http://dolibarr.iut-rodez.fr/G2024-43-SAE/documents/fournisseur/facture/" . $fichier;

        // Capture la sortie des headers
        ob_start();
        $service->telechargerFichierApi($fichier);
        $output = ob_get_clean();

        // V√©rifie si l'en-t√™te Location a bien √©t√© envoy√©
        $headers = xdebug_get_headers();
        $this->assertContains("Location: " . $expectedUrl, $headers);
    }

    public function testTelechargerFichierApiAvecUrlVide()
    {
        $service = new FournisseurService();

        $fichier = "";
        $expectedUrl = "http://dolibarr.iut-rodez.fr/G2024-43-SAE/documents/fournisseur/facture/";

        ob_start();
        $service->telechargerFichierApi($fichier);
        $output = ob_get_clean();

        $headers = xdebug_get_headers();
        $this->assertContains("Location: " . $expectedUrl, $headers);
    }

}
